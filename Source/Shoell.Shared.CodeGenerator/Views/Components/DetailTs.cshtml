@model EntityType;
@{
    Layout = null;
}
import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from "@@angular/core";
import { NgClass, NgIf } from "@@angular/common";
import { Router } from "@@angular/router";
import Guid from "devextreme/core/guid";
import { DxButtonModule, DxLoadIndicatorModule, DxResponsiveBoxModule, DxTabPanelComponent, DxTabPanelModule, DxToolbarModule } from "devextreme-angular";
import { @(Model.Name.AsPascaleCase())EditComponent } from "./edit.component";
import { @(Model.Name) } from "src/app/data/models";
import { Context } from "src/app/data";
import { LogListComponent } from "src/app/shared/components/_system/logs/list.component";
import ODataStore from "devextreme/data/odata/store";
import { icon } from "@@fortawesome/fontawesome-svg-core";
import { faRefresh, faArrowLeft } from "@@fortawesome/pro-light-svg-icons";
import { ScreenService } from "src/app/shared/services";@{
    foreach (var navType in Model.NavigationProperties
        .Where(e => e.IsCollection)
        .Select(e => e.Type)
        .Distinct())
    {
        var typeNamespace = Model.NavigationProperties.FirstOrDefault(e => e.Type == navType)?.TypeNamespace ?? string.Empty;
<text>
import { @(navType.AsPascaleCase())ListComponent } from 'src/app/shared/components/@{ if(!string.IsNullOrEmpty(typeNamespace)) { <text>@(typeNamespace)/</text> } }@(navType.AsDashedLowerCase())/list.component';</text>
    }
}

@@Component({
    selector: '@(Model.Config.AppPrefix)-@(Model.Name.AsDashedLowerCase())-detail',
    templateUrl: 'detail.component.html',
    styleUrls: ['detail.component.scss'],
    standalone: true,
    imports: [
        NgClass, NgIf, DxButtonModule, DxLoadIndicatorModule, DxResponsiveBoxModule, DxTabPanelModule, DxToolbarModule,
        @(Model.Name?.AsPascaleCase())EditComponent, @foreach (var navType in Model.NavigationProperties.Where(e => e.IsCollection).Select(e => e.Type).Distinct())
        { 
            <text>@(navType.AsPascaleCase())ListComponent, </text>
        }LogListComponent
    ]
})
export class @(Model.Name?.AsPascaleCase())DetailComponent implements OnChanges, OnInit {
    @@ViewChild(DxTabPanelComponent, { static: false }) tabPanel!: DxTabPanelComponent;
    
    @@Input() id!: Guid;

    model?: @(Model.Name?.AsPascaleCase());

    logStore!: ODataStore;

    falRefresh = icon(faRefresh).html[0];
    falArrowLeft = icon(faArrowLeft).html[0];

    isSmallScreen = false;

    constructor(
        protected context: Context,
        protected router: Router,
        protected screenService: ScreenService
    ) {
        this.logStore = context.groups.getLogsStore(this.id);

        // Implementation
        this.ngOnChanges = this.ngOnChanges.bind(this);

        // Public
        this.goBack = this.goBack.bind(this);
        this.refresh = this.refresh.bind(this);
        this.updateScreenSize = this.updateScreenSize.bind(this);

    }

    // Implementation
    async ngOnChanges(changes: SimpleChanges): Promise<void> {
        if (changes["id"] != null && changes["id"].currentValue != null) {
            await this.refresh();
            this.logStore = this.context.@(Model.Name?.AsCamelCase().AsPlural()).getLogsStore(this.id);
        }
    }

    async ngOnInit(): Promise<void> {
        this.updateScreenSize();
        await this.refresh();

        this.logStore = this.context.groups.getLogsStore(this.id);

        this.screenService.changed.subscribe(() => this.updateScreenSize());
    }

    // Public
    goBack(): void {
        this.router.navigate(['/@(Model.Name?.AsCamelCase())']);
    }

    async refresh(): Promise<void> {
        this.model = undefined;
        this.model = (await this.context.@(Model.Name?.AsCamelCase().AsPlural())
            .load({
                filter: ['id', this.id],
                select: [
                    'id',
                    'name',
@foreach(var property in Model.Properties)
{
<text>
                    '@(property.Name.AsCamelCase())',</text>
}

@foreach(var property in Model.NavigationProperties.Where(e => !e.IsCollection))
{
<text>
                    '@(property.ForeignKey.AsCamelCase())','@(property.Name.AsCamelCase()).name',</text>
}

                ]
            }))[0];
    }

    protected updateScreenSize() {
        this.isSmallScreen = this.screenService.sizes['screen-small'] || this.screenService.sizes['screen-x-small'];

        if (this.tabPanel != null) {
            if (!this.isSmallScreen && this.tabPanel.instance.option("selectedIndex") == 0) {
                this.tabPanel.instance.option("selectedIndex", 1);
            }
        }
    }
}
